
// Include this
// #include "/Engine/Private/Common.ush"
// Or this, this is included in Common.ush
#include "/Engine/Public/Platform.ush"

// These contain various functions and structs that may be useful - not a complete list
// #include "/Engine/Generated/GeneratedUniformBuffers.ush" 
#include "/Engine/Private/DeferredShadingCommon.ush"
// #include "/Engine/Private/ColorUtils.ush"
// #include "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
// #include "/Engine/Private/Random.ush"
// #include "/Engine/Private/SceneTexturesCommon.ush"
// #include "/Engine/Private/SceneData.ush"
// #include "/Engine/Private/Common.ush"
// #include "/Engine/Private/DeferredShadingCommon.ush"
// #include "/Engine/Private/ScreenPass.ush"
// #include "/Engine/Private/SceneTexturesCommon.ush"
// #include "/Engine/Private/SceneTextureParameters.ush"

#include "Example.ush"

// For better colour matching need to use better colours spaces such as CIELAB
// https://en.wikipedia.org/wiki/CIELAB_color_space

// And use DeltaE to get the perceptual difference between colours
// https://zschuessler.github.io/DeltaE/learn/

// Colour math function psuedo code https://www.easyrgb.com/en/math.php

float3 TargetColour;

// Yilin notes: Scene color is rendered with lighting but no post processing (bloom, color grading, tone mapping, motion blur, etc)
Texture2D<float4> SceneColorTexture;

// For this effect, using stencils would be more efficient
// TODO: toggle shader off and on during runtime
// Yilin notes: This returned value will be applied to the render target (SV_Target0). 
float4 MainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
	const float3 TargetColourLab = RGBtoLab(TargetColour);

	// Yilin notes: u can use a sampler to get a list of colors around the pixel pos (for blurring maybe)
	const float4 SceneColour = SceneColorTexture.Load(int3(SvPosition.xy, 0));
	
	// Yilin notes: FScreenSpaceData ScreenSpaceData =... gets data from a struct included in /Engine/Private/DeferredShadingCommon.ush
#if USE_UNLIT_SCENE_COLOUR
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceDataUint(SvPosition.xy, false);
	const float4 SceneColourUnlit = float4(ScreenSpaceData.GBuffer.BaseColor, 0);
	const float3 SceneColourLab = RGBtoLab(SceneColourUnlit.rgb);
#else
	const float3 SceneColourLab = RGBtoLab(SceneColour.rgb);
#endif

	const float DeltaE = DeltaE2000(TargetColourLab, SceneColourLab, 1, 1, 1);
	
	// If the scene is within the threshold, return scene colour
	// 	Delta E	Perception
	// <= 1.0	Not perceptible by human eyes.
	// 1 - 2	Perceptible through close observation.
	// 2 - 10	Perceptible at a glance.
	// 11 - 49	Colors are more similar than opposite
	// 100	Colors are exact opposite
	FLATTEN
	if(DeltaE < 45)
	{
		return SceneColour;
	}
	
	// Otherwise return greyscale version of scene colour
	return 0.21 * SceneColour.r + 0.72 * SceneColour.g + 0.07 * SceneColour.b; 
}